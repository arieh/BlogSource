<?php
/*
	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files (the
	"Software"), to deal in the Software without restriction, including
	without limitation the rights to use, copy, modify, merge, publish,
	distribute, sublicense, and/or sell copies of the Software, and to
	permit persons to whom the Software is furnished to do so, subject to
	the following conditions:
	
	The above copyright notice and this permission notice shall be included
	in all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

require_once('userAuthDba.class.php');

class keyHandler {

	/**
	 * @var string a random key holder
	 * @access private
	 */
	private $_key = '';
	
	/**
	 * @var userAuthDba a database access object
	 * @access private
	 */
	 
	private $_dba = null;
    
    /**
     * constructor for the class
     * 
     * @param mixed $link a database link (should be mysql_link)
     * 
     * @access public
     */
    public function __construct($link,$ini=''){
    	$this->_dba = new userAuthDba($link,$ini);
    	
    	$ip = getenv('REMOTE_ADDR');
    	$this->_key = sha1(substr($ip,rand(0,6),rand(6,10)));
    }
    
    /** 
     * generates a temporary key and isenrts it into the database
     * @access public
     */
    public function generateKey(){
    	$this->_dba->insertKey($this->_key);
    }
    
    
    /**
     * returns the temporary key generated for this session
     * @access public
     * @return string the temporary keyh that was generated for this session
     */
    public function getKey(){
    	return $this->_key;
    }
    
    /** 
     * authenticates the recived key versus the user's password
     * 
     * this function uses the user name and his password, linked with a temporary 
     * key that was designated for him to generated a hashed key. if this key is
     * identical to the key that was generated by the client-side, it means the login is valid.
     * 
     * @param string $name        user name
     * @param string $encodedPass the encoded password
     * @param bool   $sha1        wheater or not the passwords in the db are encoded with sha1 or not
     * 
     * @access public
     * @return bool wheather the encoded key is valid
     */
    public function authenticate($name,$encodedPass,$sha1=true){
    		//get the last key that was generated for this session
    	$ip = getenv('REMOTE_ADDR');
    	$key  = $this->_dba->getKeyFromDB($ip);
    		//check if a user exists with this name
    	if ($this->_dba->userExists($name)==false) return false;    	
    
    		//retrive the password for the user
    	$pass = $this->_dba->getPass($name);
    	
    		//make sure password is hashed
    	if (!$sha1) $pass = sha1($pass);
    		//create a hashed string from the date collected
		$encoded = sha1(sha1($pass.$name.$key));
		if (_DEBUG_) fb($encoded,$key);
			//generate a new key, so the last key won't be usable
		$this->generateKey();
		
			//check the hashed string with the key sent by the client side
		return ($encodedPass==$encoded);
    }
}
?>